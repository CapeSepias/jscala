{"name":"JScala","tagline":"Scala macro that produces JavaScript from Scala code.","body":"JScala\r\n======\r\n\r\nScala macro that produces JavaScript from Scala code. Let it be type safe!\r\n\r\n\r\nSupported Features:\r\n===================\r\n* Variable definitions, basic unary and binary operations\r\n* Named and anonymous functions\r\n* Scala Arrays/Seq as JavaScript Array literals\r\n* Scala Map and anonymous classes as JavaScript object\r\n* if, while, for..in and for statements\r\n* Scala if as an expression (e.g. val a = if (true) 1 else 2)\r\n* Scala match as JavaScript switch\r\n* Basic Scala class/trait definition to JavaScript object definition translation\r\n* Global JavaScript functions (parseInt etc)\r\n* Basic Browser objects (window, history, location etc)\r\n* Basic HTML DOM objects (Document, Element, Attribute, Node, NodeList etc)\r\n* Raw JavaScript inclusion\r\n* Values and function call injections from your Scala code\r\n* Generated JavaScript eval using Java ScriptEngine\r\n* Pretty printing and compression using YUI compressor\r\n* Basic @JavaScript macro annotation support\r\n\r\nExamples\r\n========\r\n\r\nThis Scala code has no meaning but shows basic ideas:\r\n\r\n```scala\r\nval replacement = \"text\"\r\nval js = javascript {\r\n  window.setTimeout(() => {\r\n    val r = new RegExp(\"d.*\", inject(replacement))\r\n    class Point(val x: Int, val y: Int)\r\n    val point = new Point(1, 2)\r\n    def func(i: String) = r.exec(i)\r\n    val list = document.getElementById(\"myList2\")\r\n    val map = collection.mutable.Map[String, String]()\r\n    for (idx <- 0 until list.attributes.length) {\r\n      val attr = list.attributes.item(idx).as[Attribute]\r\n      val text = if (attr.textContent.length > 0) attr.textContent else \"default\"\r\n      map(attr.name) = func(text)\r\n    }\r\n    val obj = new {\r\n      val field = 1\r\n      def func2(i: Int) = \"string\"\r\n    }\r\n    val links = Array(\"https://github.com/nau/jscala\", \"https://github.com/lampepfl/scala-js\")\r\n    for (link <- links) {\r\n      include(\"var raw = 'JavaScript'\")\r\n      console.log(link + obj.func2(obj.field) + point.x)\r\n    }\r\n    window.location.href = links(0).replace(\"jscala\", \"jscala/blob/master/README.md\")\r\n  }, 1000)\r\n}\r\nprintln(js.asString)\r\n```\r\n\r\nIt will print\r\n\r\n```javascript\r\nwindow.setTimeout((function () {\r\n    var r = new RegExp(\"d.*\", \"text\");\r\n    function Point(x, y) {\r\n      this.x = x;\r\n      this.y = y\r\n    };\r\n    var point = new Point(1, 2);\r\n    function func(i) {\r\n      return r.exec(i);\r\n    };\r\n    var list = document.getElementById(\"myList2\");\r\n    var map = {};\r\n    for (var idx = 0; idx < list.attributes.length; idx++) {\r\n      var attr = list.attributes.item(idx);\r\n      var text;\r\n      if (attr.textContent.length() > 0) {\r\n        text = attr.textContent;\r\n      } else {\r\n        text = \"default\";\r\n      };\r\n      map[attr.name] = func(text);\r\n    };\r\n    var obj = {\r\n      field: 1,\r\n      func2: (function (i) {\r\n        return \"string\";\r\n      })\r\n    };\r\n    var links = [\"https://github.com/nau/jscala\", \"https://github.com/lampepfl/scala-js\"];\r\n    for (link in links) {\r\n      var raw = 'JavaScript';\r\n      console.log((link + obj.func2(obj.field)) + point.x);\r\n    };\r\n    window.location.href = links[0].replace(\"jscala\", \"jscala/blob/master/README.md\");\r\n  }), 1000)\r\n```\r\n      \r\nHow To Use\r\n==========\r\n\r\nIn your build.sbt add\r\n\r\n    scalaVersion := \"2.10.2\"\r\n\r\n    libraryDependencies += \"org.jscala\" %% \"jscala-macros\" % \"0.2\"\r\n\r\n    libraryDependencies += \"com.yahoo.platform.yui\" % \"yuicompressor\" % \"2.4.7\"\r\n    \r\nIf you want to try the latest snapshot:\r\n\r\n    scalaVersion := \"2.10.2\"\r\n\r\n    resolvers += Resolver.sonatypeRepo(\"snapshots\")\r\n\r\n    libraryDependencies += \"org.jscala\" %% \"jscala-macros\" % \"0.3-SNAPSHOT\"\r\n\r\n    libraryDependencies += \"com.yahoo.platform.yui\" % \"yuicompressor\" % \"2.4.7\"\r\n\r\nIn your code\r\n\r\n```scala\r\nimport org.jscala._\r\nval js = javascript { ... }\r\nprintln(js.asString)\r\nprintln(js.compress)\r\nprintln(js.eval())\r\n```\r\n    \r\nThat's it!\r\n\r\nHow To Try Macro Annotations\r\n============================\r\nIn your build.sbt add\r\n\r\n    scalaVersion := \"2.10.2\"\r\n\r\n    resolvers += Resolver.sonatypeRepo(\"snapshots\")\r\n    \r\n    addCompilerPlugin(\"org.scala-lang.plugins\" % \"macro-paradise_2.10.3-RC2\" % \"2.0.0-SNAPSHOT\")\r\n\r\n    libraryDependencies += \"org.jscala\" %% \"jscala-macros\" % \"0.3-SNAPSHOT\"\r\n    \r\n    libraryDependencies += \"org.jscala\" %% \"jscala-annots\" % \"0.3-SNAPSHOT\"\r\n\r\n    libraryDependencies += \"com.yahoo.platform.yui\" % \"yuicompressor\" % \"2.4.7\"\r\n\r\nIn your code\r\n\r\n```scala\r\nimport org.jscala._\r\n@JavaScript class Test {\r\n  def hello() {\r\n    print(\"Hello\")\r\n  }\r\n}\r\n// Run on JVM\r\n(new Test()).hello() // prints \"Hello\"\r\nval testJs = Test.javaScript.as[JsStmt] // Get class Test JsAst\r\nval main = javascript {\r\n  val t = new Test()\r\n  t.hello()\r\n}\r\nval js = testJs join main // join class Test definition with main code\r\njs.eval() // prints \"Hello\" using Rhino\r\nprintln(js.asString) // prints resulting JavaScript\r\n```\r\n\r\nSee AES example:\r\n\r\nhttps://github.com/nau/jscala/blob/master/jscala-examples/src/main/scala/org/jscalaexample/AES.scala\r\n\r\nIt's AES Scala implementation which is used for both Scala and JavaScript encryption/decryption.\r\n\r\n\r\nHow To Build And Play Some Tetris\r\n=================================\r\n\r\nMake sure you have at least -Xmx750Mb for your sbt. \r\nDon't know why but it takes up to 700Mb to compile _jscala-macros_ project.\r\n\r\nIn sbt shell run `tetris` task. \r\nIt will compile and generate _tetris.js_ file in _jscala-examples/javascript-tetris_ and open Tetris game in your browser.\r\nTetris is fully written in Scala and translates to JavaScript mostly literally. \r\n\r\nTetris sources are here: [jscala-examples/src/main/scala/org/jscalaexample/Tetris.scala](https://github.com/nau/jscala/blob/master/jscala-examples/src/main/scala/org/jscalaexample/Tetris.scala)\r\n\r\nPlanned Features\r\n================\r\n\r\n* JavaScript frameworks support: jQuery, Angular.js etc\r\n* Web frameworks support: Play, Lift\r\n\r\nFeedback\r\n========\r\n\r\nAny feedback is very welcome!\r\n\r\nYou can use [JScala mailing list](https://groups.google.com/forum/#!forum/jscala-user) if you have any questions.\r\n\r\nOr simply ask me on Twitter: [@atlanter](https://twitter.com/atlanter)\r\n","google":"UA-731086-4","note":"Don't delete this file! It's used internally to help with page regeneration."}